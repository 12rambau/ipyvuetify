{% block header %}
{% endblock %}
{% block imports %}
{% block globalimports %}
import {
  WidgetModel, DOMWidgetModel,
  WidgetView, DOMWidgetView,
  unpack_models
} from '@jupyter-widgets/base';

import {
    renderChildren, createContent, addListeners
} from "../helpers"

{% endblock %}
{% block localimports %}
{% if outputMultiple %}

{% for ref in widgets[0].localDependencies if ref !== "VuetifyWidget" %}
import { {{ ref }}Model } from './{{ ref }}';
{% endfor %}
{% endif %}
{% endblock %}
{% endblock %}
{% block widgets %}
{% for widget in widgets %}
{% block widget %}

export
class {{ widget.name }}Model extends {{ widget.inherits[0] }}Model {

{% block widgetbody %}
  defaults() {
    return {...super.defaults(), ... {
      _model_name:  "{{ widget.name }}Model",
      {% if widget.properties %}
      {% for propName, prop in widget.properties %}
      {{ propName }}: {{ prop.default }},
      {% endfor %}
      {% endif %}
    }};
  }

  {% if widget.name === "VuetifyWidget" %}
  vueRenderChildren(createElement) {
    return this.get("children").map(c => typeof(c) === "string" ? c : c.vueRender(createElement));
  }
  {% else %}
  vueRender(createElement) {
    const model = this;
    const elem = createElement({
        data() {
            return {
                v_model: model.get("v_model")
            };
        },
        created() {
            addListeners(model, this);
        },
        render(createElement) {
          {% if widget.name === "Text" %}
            return this._v(model.get("value"));
          {% else %}
            return createElement(
                'v{{ widget.name | replace(r/([A-Z][a-z]+)/g, "-$1") | lower}}',
                createContent(model, this, "{{widget.name}}"),
                renderChildren(this, model, createElement));

          {% endif %}
        }
    }, {...model.get("slot") && {slot: model.get("slot")}})

    /* Impersonate the wrapped component (e.g. v-tabs uses this name to detect v-tab en v-tab-item) */
    elem.componentOptions.Ctor.options.name = 'v{{ widget.name | replace(r/([A-Z][a-z]+)/g, "-$1") | lower}}';
    return elem;
  }
  {% endif %}
{% endblock %}
}

{{ widget.name }}Model.serializers = {
    ...{{ widget.inherits[0] }}Model.serializers,
    {% for key, serializer in widget.serializers %}
    {{ key }}: {{ serializer }},
    {% endfor %}
};

{% endblock %}
{% endfor %}
{% endblock %}

